/**
* FILENAME:tree.h
* @author:Stephen_xu
* @data:2021-01-20 16:01
**/

/*
树形结构是非线性结构(一个结点可能有多个前驱或后继结点)
树和二叉树都是重要的树形结构
*/

/*
一、树
1.树的基本定义

1.1 一棵树是结点的有限集合T。若T非空;
    ① 有一个特别标出的结点，称作树的根，root(T);
    ② 其余结点分为若干不相交的非空集合T1，T2，…，Tm(m>=0)
    且他们又都是树,称作root(T)的subtree(子树)。

    在②中子树相对次数明确，则为有序树，否则无序树。
    一个森林是0课或多棵不相交的(非空)树的集合。
    森林和树的差别很小：
        如果删除树的根，就得到一个森林。
        如果增加一个结点作为根结点到森林，就得到一个树。

ps:此处的树在图论中称为rooted tree(有根树)，与之相对的还有unrooted tree(无根树)、free tree(自由树)

2.树的相关用语
    2.1 father/child/sibling/neighbor/descendant/ancestor(父亲、儿子、兄弟、邻居、后裔、祖先)
        child:一个结点含有的子树的根节点称为该节点的子结点。
        father：一个结点含有子结点，则这个结点是其子结点的父结点。
        sibling：具有相同父结点的结点相互成为兄弟结点。
        neighbor：父亲或者儿子
        descendant：通过反复从子到父可到达的结点
        ancestor：通道反复从父到子可到达的结点
    2.2 degree/leaf node/branch node(度、叶子结点、分支结点)
        结点的度：一个结点含有子树的个数
        树的度：一颗树中，最大结点度
        叶子节点：度为0的节点(非根的终端结点terminal node)
        分支结点：非终端结点
    2.3 level(结点的层数)
        看题目说明，有的层数是根结点第0层开始，有的第1层开始。
    2.4 path/distance/depth/height(路径、路径长度、结点深度、结点高度)
        path：结点序列v1,v2,……,vk(v1到vk的路径)
        distance：路径经历的边数，即k-1
        结点的深度：根到结点的distance
        树的深度：所有结点中最大的深度
        结点的高度：结点到叶节点最长路径的distance
        叶节点的高度：0
        树的高度：根结点的高度  
*/